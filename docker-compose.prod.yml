version: '3.8'

services:
  # Next.js Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/wellLiCases
      - NEXT_PUBLIC_SITE_URL=https://your-domain.com
      - NEXT_PUBLIC_COMPANY_NAME=WELL-LI Cases
      - NEXT_PUBLIC_COMPANY_EMAIL=info@well-li.com
      - NEXT_PUBLIC_COMPANY_PHONE=+86 20 1234 5678
      - NEXT_PUBLIC_COMPANY_ADDRESS=Industrial Zone, Guangzhou, China
      # Email configuration - Use environment variables or secrets
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      # Security
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - mongodb
      - redis
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database (Production)
  mongodb:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=wellLiCases
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
      - ./backups:/backups
    networks:
      - app-network
    restart: unless-stopped
    command: mongod --auth
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - static_files:/var/www/static:ro
    depends_on:
      - app
    networks:
      - app-network
    restart: unless-stopped

  # MongoDB Backup Service
  mongodb-backup:
    image: mongo:6.0
    volumes:
      - mongodb_data:/data/db:ro
      - ./backups:/backups
    environment:
      - MONGO_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
    networks:
      - app-network
    command: >
      sh -c "
        while true; do
          mongodump --host mongodb:27017 --authenticationDatabase admin 
          --username $$MONGO_ROOT_USERNAME --password $$MONGO_ROOT_PASSWORD 
          --out /backups/backup-$$(date +%Y%m%d-%H%M%S)
          find /backups -type d -name 'backup-*' -mtime +7 -exec rm -rf {} +
          sleep 86400
        done
      "
    restart: unless-stopped

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  static_files:
    driver: local

networks:
  app-network:
    driver: bridge

# Production secrets (use Docker secrets in production)
secrets:
  email_password:
    external: true
  jwt_secret:
    external: true
  mongo_root_password:
    external: true